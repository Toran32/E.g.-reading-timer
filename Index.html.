<!doctype html>
<html lang="en">
<head>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width,initial-scale=1">
<title>Reading Pomodoro</title>
<style>
  :root{
    --accent:#7c4dff; /* purple */
    --bg1:#f4f2ff;
    --bg2:#ffffff;
    --text:#2b2b2b;
  }
  *{box-sizing:border-box}
  body{
    margin:0; min-height:100vh; display:grid; place-items:center;
    background: linear-gradient(180deg,var(--bg1),var(--bg2));
    font-family: system-ui,-apple-system,Segoe UI,Roboto,Helvetica,Arial,sans-serif;
    color:var(--text);
  }
  .app{ width:min(820px,94vw); padding:28px 22px 34px; text-align:center }
  .tabs{ display:flex; gap:14px; justify-content:center; margin-bottom:18px; flex-wrap:wrap }
  .tab{
    padding:10px 16px; border:2px solid #d6d3ff; color:var(--accent);
    border-radius:30px; background:#fff; cursor:pointer; font-weight:600; letter-spacing:.2px
  }
  .tab.active{ background:var(--accent); color:#fff; border-color:transparent }
  #time{
    font-size:clamp(64px,18vw,160px); font-weight:800; letter-spacing:2px;
    color:var(--accent); margin:20px 0 12px
  }
  .controls{ display:flex; gap:14px; justify-content:center; align-items:center; flex-wrap:wrap }
  button{
    border:2px solid #d6d3ff; background:#fff; color:var(--text);
    padding:10px 18px; border-radius:16px; cursor:pointer; font-weight:600
  }
  button.primary{ background:var(--accent); color:#fff; border-color:transparent }
  button:disabled{ opacity:.55; cursor:default }
  .row{ display:flex; gap:10px; justify-content:center; margin-top:10px }
  dialog{
    border:none; border-radius:16px; padding:20px; width:min(420px,92vw); box-shadow:0 10px 30px rgba(0,0,0,.1)
  }
  .field{ display:flex; align-items:center; justify-content:space-between; margin:10px 0 }
  input[type="number"]{ width:90px; padding:8px 10px; border:1px solid #ddd; border-radius:10px; font-size:16px }
  .note{ opacity:.7; font-size:14px; margin-top:6px }
</style>
</head>
<body>
  <div class="app">
    <div class="tabs">
      <button class="tab" data-mode="short">Short Break</button>
      <button class="tab active" data-mode="focus">Focus</button>
      <button class="tab" data-mode="long">Long Break</button>
    </div>

    <div id="time">25:00</div>

    <div class="controls">
      <button id="start" class="primary">Start</button>
      <button id="pause" style="display:none">Pause</button>
      <button id="resume" class="primary" style="display:none">Resume</button>
      <button id="reset">Reset</button>
      <button id="gear" title="Settings">‚öôÔ∏è</button>
    </div>
    <div class="row note" id="status"></div>
  </div>

  <dialog id="settings">
    <h3 style="margin:0 0 8px">Timer Settings</h3>
    <div class="field"><label>Focus (min)</label><input id="focusMin" type="number" min="1" step="1"></div>
    <div class="field"><label>Short Break (min)</label><input id="shortMin" type="number" min="1" step="1"></div>
    <div class="field"><label>Long Break (min)</label><input id="longMin" type="number" min="1" step="1"></div>
    <div class="note">Values are saved and used in Notion embeds too.</div>
    <div class="row" style="margin-top:14px">
      <button id="save">Save</button>
      <button id="close">Close</button>
    </div>
  </dialog>

  <audio id="ding" preload="auto">
    <source src="data:audio/mp3;base64,//uQZAAAAAAAAAAAAAAAAAAAA..." type="audio/mp3">
  </audio>

<script>
(function(){
  // ---- persistence
  const storeKey = 'reading-pomo-v1';
  const defaults = { focus:25, short:5, long:15 };
  const saved = JSON.parse(localStorage.getItem(storeKey)||'{}');
  const config = Object.assign({}, defaults, saved);

  // ---- elements
  const timeEl = document.getElementById('time');
  const startBtn = document.getElementById('start');
  const pauseBtn = document.getElementById('pause');
  const resumeBtn = document.getElementById('resume');
  const resetBtn = document.getElementById('reset');
  const tabs = [...document.querySelectorAll('.tab')];
  const statusEl = document.getElementById('status');
  const gear = document.getElementById('gear');
  const modal = document.getElementById('settings');
  const ding = document.getElementById('ding');

  const focusMin = document.getElementById('focusMin');
  const shortMin = document.getElementById('shortMin');
  const longMin = document.getElementById('longMin');
  const saveBtn = document.getElementById('save');
  const closeBtn = document.getElementById('close');

  let mode = 'focus';      // focus | short | long
  let totalMs = config[mode]*60*1000;
  let startAt = null;
  let timer = null;
  let remaining = totalMs;

  function fmt(ms){
    const s = Math.max(0, Math.round(ms/1000));
    const m = Math.floor(s/60);
    const sec = s%60;
    return `${String(m).padStart(2,'0')}:${String(sec).padStart(2,'0')}`;
  }
  function render(){
    timeEl.textContent = fmt(remaining);
  }
  function setMode(m){
    mode = m;
    tabs.forEach(t=>t.classList.toggle('active', t.dataset.mode===m));
    totalMs = config[m]*60*1000;
    remaining = totalMs;
    stop();
    render();
    statusEl.textContent = (m==='focus'?'Time to read üìö':'Break time ‚òïÔ∏è');
  }
  function tick(){
    const elapsed = Date.now()-startAt;
    remaining = totalMs - elapsed;
    if(remaining<=0){
      remaining=0; render(); stop(); try{ding.play()}catch(e){}
      statusEl.textContent = 'Done!';
      return;
    }
    render();
  }
  function start(){
    startAt = Date.now();
    timer = setInterval(tick, 200);
    startBtn.style.display='none';
    pauseBtn.style.display='';
    resumeBtn.style.display='none';
  }
  function pause(){
    clearInterval(timer); timer=null;
    totalMs = remaining;
    startBtn.style.display='none';
    pauseBtn.style.display='none';
    resumeBtn.style.display='';
  }
  function resume(){
    startAt = Date.now();
    timer = setInterval(tick, 200);
    startBtn.style.display='none';
    pauseBtn.style.display='';
    resumeBtn.style.display='none';
  }
  function stop(){
    clearInterval(timer); timer=null;
    startBtn.style.display='';
    pauseBtn.style.display='none';
    resumeBtn.style.display='none';
  }
  function reset(){
    totalMs = config[mode]*60*1000;
    remaining = totalMs;
    stop(); render();
  }

  tabs.forEach(t=>t.addEventListener('click', ()=> setMode(t.dataset.mode)));
  startBtn.onclick = start;
  pauseBtn.onclick = pause;
  resumeBtn.onclick = resume;
  resetBtn.onclick = reset;

  gear.onclick = ()=> {
    focusMin.value = config.focus;
    shortMin.value = config.short;
    longMin.value  = config.long;
    modal.showModal();
  };
  closeBtn.onclick = ()=> modal.close();
  saveBtn.onclick = ()=>{
    config.focus = Math.max(1, parseInt(focusMin.value||defaults.focus,10));
    config.short = Math.max(1, parseInt(shortMin.value||defaults.short,10));
    config.long  = Math.max(1, parseInt(longMin.value ||defaults.long ,10));
    localStorage.setItem(storeKey, JSON.stringify(config));
    modal.close();
    setMode(mode); // reload current mode with new length
  };

  // init
  setMode('focus');
  render();
})();
</script>
</body>
</html>
